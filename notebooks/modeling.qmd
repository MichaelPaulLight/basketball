---
title: "nba_exploration"
format: html
editor: visual
---

```{r}
library(hoopR)
library(tidyverse)
library(janitor)
library(zoo)
library(brms)
library(bayesplot)
library(ggdist)
```

```{r}
tictoc::tic()
progressr::with_progress({
  nba_pbp <- hoopR::load_nba_pbp(2021:hoopR::most_recent_nba_season())
})
tictoc::toc()
```

```{r}
nba_pbp
```

```{r}
player_logs <- nba_leaguegamelog(season = "2024-25", player_or_team = "P") %>%
  pluck("LeagueGameLog") %>%
  clean_names() %>%
  mutate(team_location = ifelse(str_detect(matchup, "\\@"), "away", "home"),
         across(c(player_id, team_id), as.numeric))

function_pbp <- function(x){
  nba_data_pbp(x) %>%
    mutate(game_id = x)
}

games <- player_logs %>%
  distinct(game_id) %>%
  pull(game_id)

pbp_month <- map_df(games, function_pbp)
```

```{r}

nba_pbp_raw <- pbp_month %>%
  mutate(across(c(player1_id, player2_id, player3_id), as.numeric))

player_logs <- player_logs %>%
  mutate(across(c(player_id, team_id), as.numeric))

nba_pbp <- nba_pbp_raw %>%
  left_join(player_logs %>%
              distinct(player1_id = player_id, player1 = player_name)) %>%
  left_join(player_logs %>%
              distinct(player2_id = player_id, player2 = player_name)) %>%
  left_join(player_logs %>%
              distinct(player3_id = player_id, player3 = player_name)) %>%
  left_join(player_logs %>%
              distinct(team_id = team_id, slug_team = team_abbreviation)) %>%
  left_join(player_logs %>%
              distinct(offense_team_id = team_id, off_slug_team = team_abbreviation)) %>%
  select(game_id, period, clock, number_event = event_num, msg_type = event_type, act_type = event_action_type, slug_team, off_slug_team, player1, player2, player3, description = description, desc_value = opt1,
         opt2, ord = order, locX, locY)  %>%
  mutate(game_id = as.integer(game_id)) %>%
  left_join(player_logs %>%
              distinct(game_id = as.integer(game_id), slug_team = team_abbreviation, team_location) %>%
              pivot_wider(names_from = team_location,
                          values_from = slug_team,
                          names_prefix = "team_"))

nba_pbp <- nba_pbp %>%
  mutate(number_original = number_event) %>%
  separate(clock, into = c("min_remain", "sec_remain"), sep = ":", remove = FALSE, convert = TRUE) %>%
  mutate(secs_left_qtr = (min_remain * 60) + sec_remain) %>%                       
  mutate(secs_start_qtr = case_when(                                                                        
    period %in% c(1:5) ~ (period - 1) * 720,
    TRUE ~ 2880 + (period - 5) * 300
  )) %>%
  mutate(secs_passed_qtr = ifelse(period %in% c(1:4), 720 - secs_left_qtr, 300 - secs_left_qtr),  
         secs_passed_game = secs_passed_qtr + secs_start_qtr) %>%
  arrange(game_id, secs_passed_game) %>%
  filter(msg_type != 18) %>%     # instant replay
  group_by(game_id) %>%
  mutate(number_event = row_number()) %>%  # new numberEvent column with events in the right order
  ungroup() %>%
  select(-c(contains("remain"), secs_left_qtr, secs_start_qtr, secs_passed_qtr)) %>%
  arrange(game_id, number_event) %>%
  mutate(shot_pts = desc_value * ifelse(msg_type %in% c(1:3) & !str_detect(description, "Missed"), 1, 0)) %>%
  group_by(game_id) %>%
  mutate(hs = cumsum(coalesce(if_else(slug_team == team_home, shot_pts, 0), 0)),
         vs = cumsum(coalesce(if_else(slug_team == team_away, shot_pts, 0), 0))) %>%
  ungroup() %>%
  arrange(game_id, number_event)

```

```{r}
players_subbed <- nba_pbp %>%
  filter(msg_type == 8) %>%
  select(game_id, period, number_event, player_in = player2, player_out = player1, description) %>%
  pivot_longer(cols = starts_with("player"),
               names_to = "in_out",
               values_to = "player_name",
               names_prefix = "player_") %>%
  arrange(game_id, period, number_event) %>%
  distinct(game_id, period, player_name, .keep_all = TRUE) %>%
  distinct(game_id, period, player_name, in_out) %>%
  mutate(starter = ifelse(in_out == "out", 1, 0))


starters_quarters <- nba_pbp %>%
  filter(!(msg_type == 6 & act_type %in% c(11, 12, 16, 18, 30))) %>%
  filter(!msg_type %in% c(9, 11)) %>% # timeout and ejection
  select(game_id, period, starts_with("player")) %>%
  pivot_longer(cols = starts_with("player")) %>%
  filter(!is.na(value),
         value != 0) %>%
  distinct(game_id, period, player_name = value) %>%
  anti_join(players_subbed) %>%
  bind_rows(players_subbed %>%
              filter(starter == 1)) %>%
  transmute(game_id, period, player_name) %>%
  left_join(player_logs %>%
              distinct(game_id = as.integer(game_id), player_name, slug_team = team_abbreviation))

starters_quarters <- starters_quarters %>%
  arrange(game_id, period, slug_team) %>%
  group_by(game_id, period, slug_team) %>%
  summarise(lineup_start = paste(sort(unique(player_name)), collapse = ", ")) %>%
  ungroup() %>%
  left_join(player_logs %>%
              distinct(game_id = as.integer(game_id), slug_team = team_abbreviation, team_location))

lineup_subs <- nba_pbp %>%
  filter(msg_type == 8) %>%
  left_join(starters_quarters) %>%
  select(game_id, number_event, period, clock, slug_team, player_out = player1, player_in = player2, 
         team_location, lineup_before = lineup_start) %>%
  group_by(game_id, period, slug_team) %>%
  mutate(lineup_before = ifelse(row_number() == 1, lineup_before, NA)) %>%
  ungroup() %>%
  mutate(lineup_before = str_split(lineup_before, ", ")) %>% 
  arrange(game_id, number_event) %>%
  group_by(game_id, period, slug_team) %>%
  mutate(lineup_after = accumulate2(player_in, player_out, ~setdiff(c(..1, ..2), ..3), .init = lineup_before[[1]])[-1],
         lineup_before = coalesce(lineup_before, lag(lineup_after))) %>%
  ungroup() %>% 
  mutate(across(starts_with("lineup"), ~ map_chr(., ~ paste(.x, collapse = ", "))))

lineup_game <- nba_pbp %>%
  left_join(starters_quarters %>%
              select(-slug_team) %>%
              pivot_wider(names_from = team_location,
                          values_from = lineup_start,
                          names_prefix = "lineup_start_") %>%
              mutate(msg_type = 12)) %>%
  left_join(lineup_subs %>%
              select(-c(clock, starts_with("player"))) %>%
              pivot_wider(names_from = team_location,
                          values_from = starts_with("lineup"))) %>%
  mutate(across(c(lineup_before_home, lineup_after_home), ~ ifelse(!is.na(lineup_start_home), lineup_start_home, .)),
         across(c(lineup_before_away, lineup_after_away), ~ ifelse(!is.na(lineup_start_away), lineup_start_away, .))) %>%
  group_by(game_id, period) %>%
  mutate(lineup_home = na.locf(lineup_after_home, na.rm = FALSE),
         lineup_away = na.locf(lineup_after_away, na.rm = FALSE),
         lineup_home = coalesce(lineup_home, na.locf(lineup_before_home, fromLast = TRUE, na.rm = FALSE)),
         lineup_away = coalesce(lineup_away, na.locf(lineup_before_away, fromLast = TRUE, na.rm = FALSE))) %>%
  ungroup() %>%
  mutate(lineup_home = map_chr(str_split(lineup_home, ", "), ~ paste(sort(.), collapse = ", ")),
         lineup_away = map_chr(str_split(lineup_away, ", "), ~ paste(sort(.), collapse = ", "))) %>%
  select(-c(starts_with("lineup_start"), starts_with("lineup_before"), starts_with("lineup_after")))

```

```{r}
poss_initial <- lineup_game %>%
  mutate(possession = case_when(msg_type %in% c(1, 2, 5) ~ 1,
                                msg_type == 3 & act_type %in% c(12, 15) ~ 1,
                                TRUE ~ 0))
```

```{r}
# finding lane violations that are not specified
lane_description_missing <- poss_initial %>%
  group_by(game_id, secs_passed_game) %>%
  filter(sum(msg_type == 3 & act_type == 10) > 0,
         sum(msg_type == 6 & act_type == 2) > 0,
         sum(msg_type == 7 & act_type == 3) > 0,
         sum(msg_type == 1) == 0) %>%
  ungroup() %>%
  mutate(possession = ifelse(msg_type == 3 & act_type == 10, 1, possession)) %>%
  select(game_id, number_event, off_slug_team, possession)

# identify turnovers from successful challenge + jump ball that are not specified
jumpball_turnovers <- poss_initial %>%
  filter(msg_type != 8) %>%
  group_by(game_id, period) %>%
  mutate(prev_poss = zoo::na.locf0(ifelse(possession == 1, off_slug_team, NA)),
         next_poss = zoo::na.locf0(ifelse(possession == 1, off_slug_team, NA), fromLast = TRUE)) %>%
  ungroup() %>%
  group_by(game_id, secs_passed_game) %>%
  mutate(team_reb_chall = sum(msg_type == 9) > 0 & sum(msg_type == 4 & is.na(player1)) > 0) %>% 
  ungroup() %>%
  filter(msg_type == 10 & act_type == 1 & 
           lag(msg_type) == 9 &
           slug_team == lag(slug_team) &
           prev_poss == next_poss &
           lag(team_reb_chall) == FALSE) %>%
  mutate(possession = 1) %>%
  transmute(game_id, number_event, off_slug_team = ifelse(slug_team == team_home, team_away, team_home), possession) %>%
  mutate(slug_team = off_slug_team)

```

```{r}
# identify and change consecutive possessions
change_consec <- poss_initial %>%
  # rows_update(lane_description_missing, by = c("game_id", "number_event")) %>%
  rows_update(jumpball_turnovers %>% 
              mutate(across(c(off_slug_team, slug_team), as.character)), 
             by = c("game_id", "number_event")) %>%
  filter(possession == 1 | (msg_type == 6 & act_type == 30)) %>%
  group_by(game_id, period) %>%
  filter(possession == lead(possession) & off_slug_team == lead(off_slug_team)) %>%
  ungroup() %>%
  mutate(possession = 0) %>%
  select(game_id, number_event, possession)

# replace in data
poss_non_consec <- poss_initial %>%
  # rows_update(lane_description_missing, by = c("game_id", "number_event")) %>%
  rows_update(jumpball_turnovers %>% 
              mutate(across(c(off_slug_team, slug_team), as.character)), 
             by = c("game_id", "number_event")) %>%
  rows_update(change_consec, by = c("game_id","number_event"))
```

```{r}
# find start of possessions
start_possessions <- poss_non_consec %>%
  group_by(game_id, secs_passed_game, 
           slug_team_foul = ifelse(msg_type == 6, ifelse(team_home == slug_team, team_away, team_home), slug_team)) %>%
  mutate(and1 = sum(msg_type == 1) > 0 &
           sum(msg_type == 3) > 0 &
           sum(msg_type == 6 & act_type == 2) > 0 &
           (msg_type == 1 | (msg_type == 3 & act_type == 10))) %>%
  ungroup() %>%
  mutate(start_poss = case_when(msg_type == 4 & act_type == 0 & desc_value == 0 ~ clock,
                                msg_type == 3 & act_type %in% c(12, 15) & shot_pts > 0 ~ clock,
                                msg_type %in% c(1, 5) & !and1 ~ clock),
         number_event = ifelse(msg_type == 4, number_event, number_event + 1)) %>%
  filter(!is.na(start_poss))

# add start of possession column to table
poss_non_consec <- poss_non_consec %>%
  left_join(start_possessions %>%
              select(game_id, number_event, start_poss)) %>%
  group_by(game_id, period) %>%
  mutate(start_poss = ifelse(row_number() == 1, clock, start_poss),
         start_poss = na.locf(start_poss)) %>%
  ungroup()

##### Adding extra possessions

addit_poss <- poss_non_consec %>%
  filter(msg_type %in% c(1:5) & !(msg_type == 3 & act_type %in% c(16, 18:19, 20, 27:29, 25:26)) & !(msg_type == 4 & act_type == 1)) %>%
  group_by(game_id, period) %>%
  filter(row_number() == max(row_number())) %>%
  ungroup() %>%
  filter(clock != "00:00.0" & !(msg_type == 4 & desc_value == 1)) %>%
  transmute(game_id, period, start_poss = clock, possession = 1,
            off_slug_team = as.character(ifelse(msg_type == 4 | msg_type == 3 & act_type %in% c(19, 20, 29, 26), 
                                   slug_team, 
                                   ifelse(slug_team == team_home, team_away, team_home))),
            msg_type = 99, act_type = 0, number_original = 0, description = "Last possession of quarter") %>%
  left_join(poss_non_consec %>%
              filter(msg_type == 13) %>%
              select(-c(number_original, msg_type, act_type, start_poss,
                        description, possession, off_slug_team))) %>%
  mutate(number_event = number_event - 0.5,
         slug_team = as.character(off_slug_team))  # Ensure both columns are character type

pbp_poss <- poss_non_consec %>%
  bind_rows(addit_poss) %>%
  arrange(game_id, number_event)
```

```{r}

### find unidentified double technicals (instead of description showing double technical, there's one event for each but no FTs)
unident_double_techs <- lineup_game %>%
  filter(!msg_type %in% c(9, 11)) %>%   # ejection or timeout
  filter((game_id == lead(game_id) & secs_passed_game == lead(secs_passed_game) & msg_type == 6 & act_type == 11 & msg_type == lead(msg_type) & act_type == lead(act_type) & slug_team != lead(slug_team)) | (game_id == lag(game_id) & secs_passed_game == lag(secs_passed_game) & msg_type == 6 & act_type == 11 & msg_type == lag(msg_type) & act_type == lag(act_type) & slug_team != lag(slug_team))) %>%
  transmute(game_id, secs_passed_game, slug_team, number_event, description = str_replace(description, "Technical", "Double Technical"))

techs <- lineup_game %>%
  rows_update(unident_double_techs, by = c("game_id", "secs_passed_game", "slug_team", "number_event")) %>%
  filter(str_detect(description, "Technical|Defense 3 Second") & !str_detect(description, "Double Technical")) %>%
  group_by(game_id, secs_passed_game, msg_type) %>%
  mutate(sequence_num = row_number()) %>%
  ungroup() %>%
  transmute(game_id, secs_passed_game, number_event, msg_type = ifelse(msg_type == 3, "ft", "foul"), sequence_num) %>%
  pivot_wider(names_from = msg_type,
              values_from = number_event,
              names_prefix = "number_event_")

## FLAGRANT - CLEAR PATH
flagrant_clear <- lineup_game %>%
  filter(msg_type == 3 & act_type %in% c(18:20, 25:26, 27:29)) %>%
  select(game_id, secs_passed_game, number_event_ft = number_event, slug_team) %>%
  left_join(lineup_game %>%
              filter(msg_type == 6 & act_type %in% c(9, 14, 15)) %>%
              mutate(slug_team = as.character(slug_team),
                    team_home = as.character(team_home),
                    team_away = as.character(team_away)) %>%
              transmute(game_id, secs_passed_game, number_event_foul = number_event, 
                        slug_team = as.character(ifelse(slug_team == team_home, team_away, team_home))))

regular_fouls <- other_fouls %>%
  filter(msg_type == 3) %>%
  select(game_id, secs_passed_game, number_event_ft = number_event, slug_team, player_fouled = player1) %>%
  left_join(other_fouls %>%
              filter(msg_type == 6 & str_detect(description, "FT")) %>%
              mutate(slug_team = as.character(slug_team),
                    team_home = as.character(team_home),
                    team_away = as.character(team_away)) %>%
              transmute(game_id, secs_passed_game, number_event_foul = number_event, 
                       player_fouled = player3,
                       slug_team = as.character(ifelse(slug_team == team_home, team_away, team_home))))

regular_fouls <- regular_fouls %>%
  left_join(other_fouls %>%
              filter(msg_type == 6 & str_detect(description, "FT")) %>%
              anti_join(regular_fouls %>%
                          select(game_id, number_event = number_event_foul)) %>%
              transmute(game_id, secs_passed_game, number_event_foul_y = number_event, 
                        number_event_foul = NA,
                        slug_team = ifelse(slug_team == team_home, team_away, team_home))) %>%
  mutate(number_event_foul = coalesce(number_event_foul, number_event_foul_y)) %>%
  select(-number_event_foul_y)

# putting everything together
fouls_stats <- bind_rows(regular_fouls, flagrant_clear, techs) %>%
  select(game_id, secs_passed_game, number_event_ft, number_event_foul) %>%
  left_join(pbp_poss %>%
              select(game_id, number_event_ft = number_event, slug_team, shot_pts, team_home, team_away, possession)) %>%
  group_by(game_id, slug_team, number_event = number_event_foul, team_home, team_away) %>%
  summarise(total_fta = n(),
            total_pts = sum(shot_pts),
            total_poss = sum(possession)) %>%
  ungroup() %>%
  mutate(shot_pts_home = ifelse(slug_team == team_home, total_pts, 0),
         shot_pts_away = ifelse(slug_team == team_away, total_pts, 0),
         poss_home = ifelse(slug_team == team_home, total_poss, 0),
         poss_away = ifelse(slug_team == team_away, total_poss, 0)) %>%
  select(game_id, number_event, total_fta, shot_pts_home:poss_away)

pbp_poss_final <- pbp_poss %>%
  # mutate(possession = ifelse(start_poss == "00:00.0", 0, possession)) %>%   # considering nba.com bug when play has wrong clock at 00:00.0 (correct would be to not have this line)
  left_join(fouls_stats) %>%
  mutate(shot_pts_home = coalesce(shot_pts_home, ifelse(msg_type == 1 & slug_team == team_home, shot_pts, 0)),
         shot_pts_away = coalesce(shot_pts_away, ifelse(msg_type == 1 & slug_team == team_away, shot_pts, 0)),
         poss_home = coalesce(poss_home, ifelse(msg_type != 3 & possession == 1 & slug_team == team_home, possession, 0)),
         poss_away = coalesce(poss_away, ifelse(msg_type != 3 & possession == 1 & slug_team == team_away, possession, 0))) %>%
  group_by(game_id, period) %>%
  mutate(secs_played = lead(secs_passed_game) - secs_passed_game,
         secs_played = coalesce(secs_played, 0)) %>%
  ungroup() %>%
  left_join(player_logs %>%
              distinct(game_id = as.numeric(game_id), game_date = as.Date(game_date)))

########## Add garbage time

pbp_final_gt <- pbp_poss_final %>%
  left_join(starters_quarters %>%
              filter(period == 1) %>%
              select(-c(period, slug_team)) %>%
              pivot_wider(names_from = team_location,
                          values_from = lineup_start,
                          names_prefix = "lineup_start_")) %>%
  mutate(across(c(contains("lineup")), ~ str_split(., ", "), .names = "{.col}_list")) %>%
  mutate(total_starters_home = map_int(map2(lineup_home_list, lineup_start_home_list, intersect), length),
         total_starters_away = map_int(map2(lineup_away_list, lineup_start_away_list, intersect), length)) %>%
  select(-contains("list")) %>%
  mutate(margin_before = ifelse(slug_team == team_home | is.na(slug_team), hs - shot_pts - vs, vs - shot_pts - hs)) %>%
  mutate(garbage_time = case_when(
    # score differential >= 25 for minutes 12-9:
    secs_passed_game >= 2160 & secs_passed_game < 2340 & margin_before >= 25 & total_starters_home + total_starters_away <= 2 & period == 4 ~ 1,
    # score differential >= 20 for minutes 9-6:
    secs_passed_game >= 2340 & secs_passed_game < 2520 & margin_before >= 20 & total_starters_home + total_starters_away <= 2 & period == 4 ~ 1,
    # score differential >= 10 for minutes 6 and under:
    secs_passed_game >= 2520 & margin_before >= 10 & total_starters_home + total_starters_away <= 2 & period == 4 ~ 1,
    TRUE ~ 0)) %>%
  group_by(game_id) %>%
  mutate(max_nongarbage = max(number_event[which(garbage_time == 0)])) %>%
  ungroup() %>%
  mutate(garbage_time = ifelse(garbage_time == 1 & number_event < max_nongarbage, 0, garbage_time)) %>%
  select(-c(starts_with("lineup_start_"), max_nongarbage, opt2, ord))

```

```{r}
lineup_stats <- pbp_final_gt %>%
  group_by(game_id, slug_team) %>%
  mutate(stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
         stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA)) %>%
  group_by(game_id) %>%
  mutate(across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
         across(starts_with("stint"), ~ na.locf(.))) %>%
  ungroup() %>%
  pivot_longer(cols = starts_with("lineup"),
               names_to = "lineup_location",
               values_to = "lineup",
               names_prefix = "lineup_") %>%
  mutate(pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
         pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
         poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
         poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
         slug_team = ifelse(lineup_location == "home", team_home, team_away),
         slug_opp = ifelse(lineup_location == "away", team_home, team_away),
         stint = ifelse(lineup_location == "home", stint_home, stint_away)) %>%
  select(game_id, game_date, period, stint, number_event, msg_type, description, lineup, pts_team, pts_opp,
         poss_team, poss_opp, secs_played, slug_team, slug_opp, garbage_time) %>%
  group_by(game_id, game_date, period, stint, slug_team, slug_opp, lineup, garbage_time) %>%
  summarise(across(c(pts_team, pts_opp, poss_team, poss_opp, secs_played), sum)) %>%
  ungroup() %>%
  filter(secs_played + poss_opp + poss_team + pts_opp + pts_team > 0) %>%
  group_by(game_id, slug_team) %>%
  mutate(stint = row_number()) %>%
  ungroup()

```

```{r}
zero_prop <- mean(lineup_stats$secs_played == 0)
cat("Proportion of zero minutes:", zero_prop, "\n")
lineup
```

```{r}
library(brms)

player_stats <- lineup_stats |> 
  separate_longer_delim(lineup, delim = ", ") |> 
  rename(player = lineup) |> 
  filter(garbage_time == 0) |> 
  filter(secs_played > 0) |>
  group_by(player) |>
  arrange(player, game_id, stint) |> 
  mutate(prior_stint_secs = case_when(
    stint - lag(stint) == 1 ~ lag(secs_played),
    .default = 0
  )) |> 
  mutate(accumulated_secs = case_when(
    prior_stint_secs =! 0 ~ prior_stint_secs + secs_played,
    .default = secs_played
  ))

fit_01 <- brm(
  formula = secs_played ~ 
    (1 | game_id/slug_team) +     # Teams nested within games
    (1 | player) +                # Player random effect
    (1 | game_id:stint) +         # Stint effect nested within games
    (1 | slug_team:stint),        # Stint effect nested within teams
  family = Gamma(link = "log"),
  data = player_stats,
  chains = 4,
  iter = 2000,
  prior = c(
    prior(normal(7, 1), class = "Intercept"),
    prior(exponential(2), class = "sd", group = "game_id:slug_team"),
    prior(exponential(2), class = "sd", group = "player"),
    prior(exponential(2), class = "sd", group = "game_id:stint"),
    prior(exponential(2), class = "sd", group = "slug_team:stint"),
    prior(gamma(2, 0.1), class = "shape")
  ),
  file = "../models/minutes-model_01.rds"
)

```

```{r}
pp_check(fit, ndraws = 100)  # Posterior predictive check
```

```{r}
library(ggdist)
# Extract random effects for players
player_effects <- ranef(fit)$player[, , "Intercept"] |>
  as.data.frame() |>
  rownames_to_column("player") |>
  arrange(desc(Estimate))

# Extract team effects
team_effects <- ranef(fit)$slug_team[, , "Intercept"] |>
  as.data.frame() |>
  rownames_to_column("team") |>
  arrange(desc(Estimate))

# Visualize player random effects
ggplot(head(player_effects, 20), aes(y = reorder(player, Estimate), x = Estimate)) +
  stat_halfeye() +
  labs(title = "Top 20 Players by Minutes Effect",
       x = "Estimated Effect on Minutes Played (seconds)",
       y = "Player")
```

```{r}
# Calculate expected minutes for specific players
predict_minutes <- function(player_name, opp_team, home_team, fit, data) {
  newdata <- data.frame(
    player = player_name,
    slug_team = home_team,
    slug_opp = opp_team
  )
  
  posterior_pred <- posterior_predict(
    fit, 
    newdata = newdata,
    allow_new_levels = TRUE
  )
  
  # Convert to minutes and summarize
  mins_summary <- data.frame(
    mean_mins = mean(posterior_pred) / 60,
    lower = quantile(posterior_pred, 0.025) / 60,
    upper = quantile(posterior_pred, 0.975) / 60,
  )
  
  return(mins_summary)
}

# Example usage of prediction function
example_pred <- predict_minutes(
  player_name = "Nikola Jokić",  
  opp_team = "OKC",
  home_team = "DEN",
  fit = fit,
  data = player_stats
)
```

```{r}
predict_minutes <- function(player_names, opp_team, home_team, fit, data, n_games = 1) {
  # Create newdata for all players
  newdata <- data.frame(
    player = player_names,
    slug_team = home_team,
    slug_opp = opp_team
  )
  
  # Get posterior predictions for all players
  posterior_pred <- posterior_predict(
    fit, 
    newdata = newdata,
    allow_new_levels = TRUE
  )
  
  # Calculate summaries for each player
  player_summaries <- lapply(1:ncol(posterior_pred), function(i) {
    data.frame(
      player = player_names[i],
      mean_mins_per_game = mean(posterior_pred[,i]) / 60,
      lower_per_game = quantile(posterior_pred[,i], 0.025) / 60,
      upper_per_game = quantile(posterior_pred[,i], 0.975) / 60,
      total_mins = (mean(posterior_pred[,i]) / 60) * n_games,
      total_lower = (quantile(posterior_pred[,i], 0.025) / 60) * n_games,
      total_upper = (quantile(posterior_pred[,i], 0.975) / 60) * n_games
    )
  }) |>
    bind_rows() |>
    # Add team total row
    bind_rows(
      data.frame(
        player = "TEAM TOTAL",
        mean_mins_per_game = mean(rowSums(posterior_pred)) / 60,
        lower_per_game = quantile(rowSums(posterior_pred), 0.025) / 60,
        upper_per_game = quantile(rowSums(posterior_pred), 0.975) / 60,
        total_mins = mean(rowSums(posterior_pred)) / 60 * n_games,
        total_lower = quantile(rowSums(posterior_pred), 0.025) / 60 * n_games,
        total_upper = quantile(rowSums(posterior_pred), 0.975) / 60 * n_games
      )
    )
  
  # Add warnings/flags
  player_summaries <- player_summaries |>
    mutate(
      warning = case_when(
        player == "TEAM TOTAL" & mean_mins_per_game < 240 ~ "⚠️ Under 240 minutes",
        player == "TEAM TOTAL" & mean_mins_per_game > 240 ~ "⚠️ Over 240 minutes",
        mean_mins_per_game < 0 ~ "⚠️ Negative minutes",
        TRUE ~ ""
      )
    )
  
  return(player_summaries)
}

# Example usage:
home_team <- "DEN"
opp_team <- "OKC"

player_names <- player_stats |>
  filter(slug_team == home_team) |> 
  distinct(player) |>
  pull(player)

predictions <- predict_minutes(
  player_names = player_names,
  opp_team = opp_team,
  home_team = home_team,
  fit = fit,
  data = player_stats
)

# Pretty printing function for the results
print_minutes_prediction <- function(predictions) {
  predictions |>
    mutate(
      minutes = sprintf("%.1f [%.1f, %.1f]", mean_mins, lower, upper)
    ) |>
    select(player, minutes, warning) |>
    arrange(desc(mean_mins)) |>
    knitr::kable(
      col.names = c("Player/Team", "Minutes [95% CI]", "Warning"),
      align = c("l", "r", "l")
    )
}

predictions

# Print results
print_minutes_prediction(predictions)

# Optional: Plot the predictions
library(ggplot2)

ggplot(predictions |> filter(player != "TEAM TOTAL"), 
       aes(y = reorder(player, mean_mins), 
           x = mean_mins,
           xmin = lower,
           xmax = upper)) +
  geom_pointrange() +
  geom_vline(data = predictions |> filter(player == "TEAM TOTAL"),
             aes(xintercept = mean_mins),
             linetype = "dashed",
             color = "red") +
  geom_vline(xintercept = 240/length(example_players),
             linetype = "dotted",
             color = "blue") +
  labs(title = "Predicted Minutes Distribution",
       subtitle = "Red line: Predicted team total, Blue line: Equal distribution",
       x = "Minutes",
       y = "Player") +
  theme_minimal()
```

```{r}
# Create conditional effects plot for specific variables
# conditional_effects <- conditional_effects(fit, effects = "slug_team")

# Calculate season-long player usage patterns
player_usage <- player_stats |>
  group_by(player) |>
  summarise(
    total_mins = sum(secs_played) / 60,
    stints_played = n(),
    avg_mins = mean(secs_played) / 60,
    model_estimate = player_effects$Estimate[match(first(player), player_effects$player)]
  ) |>
  arrange(desc(avg_mins), stints_played)
```

```{r}
library(bayesplot)
ppc_dens_overlay(fit, color = "blue", fill = "blue", alpha = 0.5)


```
