---
title: "defender-state-space-modeling"
format: html
editor: visual
---



```{r}
library(hoopR)
library(tidyverse)
library(nanoparquet)
```


```{r}
player_logs <- nba_leaguegamelog(season = "2024-25", player_or_team = "P") %>%
  pluck("LeagueGameLog") %>%
  clean_names() %>%
  mutate(team_location = ifelse(str_detect(matchup, "\\@"), "away", "home"),
         across(c(player_id, team_id), as.numeric))

pbp_df <- read_parquet("../data/241119_pbp_gt.parquet")
```

```{r}

pbp_df <- (
  pbp_final_gt 
  |> group_by(game_id, slug_team)
  |> mutate(stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
         stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA)) 
  |> group_by(game_id) 
  |> mutate(across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
         across(starts_with("stint"), ~ na.locf(.))) 
  |> ungroup() 
  |> pivot_longer(cols = starts_with("lineup"),
               names_to = "lineup_location",
               values_to = "lineup",
               names_prefix = "lineup_")
  |> mutate(pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
         pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
         poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
         poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
         slug_team = ifelse(lineup_location == "home", team_home, team_away),
         slug_opp = ifelse(lineup_location == "away", team_home, team_away),
         stint = ifelse(lineup_location == "home", stint_home, stint_away))
  # |> select(game_id, game_date, period, stint, number_event, msg_type, description, lineup, pts_team, pts_opp,
  #         poss_team, poss_opp, secs_played, slug_team, slug_opp, garbage_time, player1, player2, player3)
  |> filter(str_detect(description, regex("shot", ignore_case = T)) & !str_detect(description, regex("clock", ignore_case = T)))
  |> mutate(shot_type = case_when(str_detect(description, "3pt") ~ "3pt",
                              TRUE ~ "2pt"))
  |> rename(known_defender = player3)
  # |> group_by(game_id, game_date, period, stint, slug_team, slug_opp, lineup, garbage_time)
  # |> summarise(across(c(pts_team, pts_opp, poss_team, poss_opp, secs_played), sum))
  # |> ungroup()
  # |> filter(secs_played + poss_opp + poss_team + pts_opp + pts_team > 0)
  # |> group_by(game_id, slug_team)
  # |> mutate(stint = row_number())
  # |> ungroup()
)

```


```{r}
shot_pbp_by_defense <- (pbp_df 
|> filter(off_slug_team != slug_team)
|> separate_longer_delim(cols = lineup, delim = ", ")
|> rename(player_name = lineup)
)  

```

```{r}
player_logs_for_join <- (
  player_logs
  |> select(player_name, player_id, team_id, team_abbreviation, game_id)
  |> rename(slug_team = team_abbreviation)
  |> mutate(game_id = as.numeric(game_id))
)

shot_pbp_by_defense <- (shot_pbp_by_defense
  |> left_join(player_logs_for_join, by = join_by("player_name", "slug_team", "game_id"))
  |> rename(defender_name = player_name)
)    
```

```{r}
defender_dashboard <- nanoparquet::read_parquet("../data/defender_dashboard.parquet")

defender_dashboard <- (
  defender_dashboard
  |> rename(defender_id = CLOSE_DEF_playerId)
  |> filter(defender_id == 1627780 & date == "2024-11-18",
            G == 1)
  
)

test <- (shot_pbp_by_defense 
         |> filter(player_id == 1627780 & game_date == "2024-11-18")
         |> mutate(make = ifelse(pts_opp > 0, 1, 0))
         |> group_by(game_id, period, player_id, make, shot_type)
         |> summarise(counts = n())
)

```

```{r}
first_date <- player_logs %>%
  distinct(game_date) %>%
  arrange(game_date) |> 
  head(1)

shot_df <- nba_shotchartdetail(
  context_measure = "FGA",
  date_from = Sys.Date() - 3,
  date_to = Sys.Date() - 2,
  game_id = "",
  game_segment = "",
  last_n_games = 0,
  league_id = "00",
  location = "",
  month = 0,
  opponent_team_id = 0,
  outcome = "",
  period = 0,
  player_id = 0,
  player_position = "",
  rookie_year = "",
  season = year_to_season(most_recent_nba_season() - 1),
  season_segment = "",
  season_type = "Regular Season",
  team_id = 0,
  vs_conference = "",
  vs_division = ""
) |> pluck("Shot_Chart_Detail")

```

```{r}
shot_df <- (shot_df 
            |> clean_names()
            |> mutate(game_id = as.numeric(game_id),
                      period = as.numeric(period),
                      game_date = as_date(game_date))
            |> rename(number_original= game_event_id)
            |> mutate(number_original = as.numeric(number_original))
            |> select(-shot_type)
)

shot_df <- (shot_df
            |> mutate(shot_distance = as.numeric(shot_distance))
            |> mutate(defense_category = case_when(
              shot_distance < 6 ~ "Less Than 6 Ft",
              shot_distance < 10 ~ "Less Than 10 Ft",
              shot_distance > 15 ~ "Greater Than 15 Ft",
              TRUE ~ "10-15 Ft"
            ))
)

gp2_pbp <- (shot_df 
            |> filter(game_id == 22400251) 
)

testy <- (gp2_pbp 
          |> left_join(shot_pbp_by_defense, by = join_by(game_id, number_original, period, game_date)) 
          |> select(game_date, game_id, period, number_original, clock, player1, player2, known_defender, locX, locY, possession, defender_name, slug_team, slug_opp, minutes_remaining, seconds_remaining, event_type, action_type, shot_zone_basic, shot_zone_area, shot_zone_range, shot_distance, shot_attempted_flag, shot_made_flag, shot_type, defense_category)
)

testy_agg <- (testy 
         |> group_by(game_id, period, defender_name, shot_type, defense_category, shot_attempted_flag, shot_made_flag)
         |> summarise(counts = n())
)

reshaped_agg <- (testy_agg
  |> # get rid of shot_attempted_flag b/c it's always 1 
    select(-shot_attempted_flag) 
  |> # pivoting shot_made_flag to create makes/misses columns
    pivot_wider(
      names_from = shot_made_flag,
      values_from = counts,
      names_prefix = "count_",
      values_fill = 0  # Important: fill NAs with 0
    )
  |> # renaming for clarity
    rename(
      misses = count_0,
      makes = count_1
    )
)

testy |> write_csv("22400251_pbp.csv")

reshaped_agg |> write_csv("22400251_def-dash-agg.csv")

```

```{r}
library(tidybayes)
                   

testy <- (
  testy 
  |> group_by(number_original) 
  |> mutate(
      defender_pos = row_number()
      ) 
  |> mutate(
    has_known_defender = !is.na(known_defender),
    known_defender_indicator = if_else(has_known_defender & known_defender == defender_name, 1, 0),
      known_defender_pos = if_else(
        has_known_defender & known_defender == defender_name,
        defender_pos,
        1L)  # arbitrary if not known
      )
)

hyperparameters <- tibble(alpha_known = 1000.0,
    alpha_unknown = 0.001,
    alpha_regular = 2.0)

compose_test <- compose_data(testy, reshaped_agg)

compose_test$N <- compose_test$n

```


```{r}

  # Read data 
  pbp <- testy
  def_dash <- reshaped_agg
  
  # Get dimensions 
  N_shots <- n_distinct(pbp$number_original)
  N_defenders <- n_distinct(def_dash$defender_name)
  N_periods <- n_distinct(pbp$period)
  N_shot_types <- n_distinct(pbp$shot_type)
  N_def_categories <- n_distinct(def_dash$defense_category)
  
  # Create mappings
  defender_to_id <- (reshaped_agg
                     %>% distinct(defender_name)
                     %>% arrange(defender_name)
                     %>% mutate(id = row_number())
                     %>% deframe()
  )
  
  def_cat_to_id <- def_dash %>%
    distinct(defense_category) %>%
    arrange(defense_category) %>%
    mutate(id = row_number()) %>%
    deframe()
  
  # Process play-by-play data
  shots_data <- pbp %>%
    # Group by shot
    group_by(number_original) %>%
    mutate(
      defender_id = defender_to_id[defender_name],
      # Get position of each defender in the group (1-5)
      defender_pos = row_number()
    ) %>%
    # Add shot info from first row of each group
    mutate(
      period = first(period),
      shot_type = if_else(str_detect(first(shot_type), "2pt"), 1L, 2L),
      def_category = def_cat_to_id[first(defense_category)],
      shot_made = first(shot_made_flag),
      has_known = !is.na(first(known_defender)) && first(known_defender) != "NA",
      known_defender_name = first(known_defender)
    ) %>%
    # For shots with known defenders, find their position
    group_by(number_original) %>%
    mutate(
      known_defender_pos = if_else(
        has_known,
        which(defender_name == known_defender_name)[1],
        1L  # arbitrary if not known
      )
    ) %>%
    # Create wide format for defenders
    select(
      number_original, period, shot_type, def_category, shot_made,
      has_known, known_defender_pos, defender_id, defender_pos
    ) %>%
    pivot_wider(
      names_from = defender_pos,
      values_from = defender_id,
      names_prefix = "defender_"
    ) %>%
    ungroup()
  
  # Process defender dashboard data
  def_dash_processed <- def_dash %>%
    mutate(
      defender_id = defender_to_id[defender_name],
      def_category_id = def_cat_to_id[defense_category],
      shot_type = if_else(shot_type == "2pt", 1L, 2L)
    )
  
  # Create makes/misses arrays
  makes_array <- array(0L, dim = c(N_defenders, N_periods, N_shot_types, N_def_categories))
  misses_array <- array(0L, dim = c(N_defenders, N_periods, N_shot_types, N_def_categories))
  
  def_dash_processed %>%
    group_by(defender_id, period, shot_type, def_category_id) %>%
    summarise(
      makes = sum(makes),
      misses = sum(misses),
      .groups = "drop"
    ) %>%
    pwalk(function(defender_id, period, shot_type, def_category_id, makes, misses) {
      makes_array[defender_id, period, shot_type, def_category_id] <<- makes
      misses_array[defender_id, period, shot_type, def_category_id] <<- misses
    })
  
  # Prepare Stan data list
  stan_data <- list(
    N_shots = N_shots,
    N_defenders = N_defenders, 
    N_periods = N_periods,
    N_shot_types = N_shot_types,
    N_def_categories = N_def_categories,
    
    # Play by play data
    defenders = shots_data %>%
      select(starts_with("defender_")) %>%
      as.matrix(),
    period = shots_data$period,
    shot_type = shots_data$shot_type,
    def_category = shots_data$def_category,
    shot_made = shots_data$shot_made,
    
    # Defender dashboard aggregates
    makes = makes_array,
    misses = misses_array,
    
    # Known defender info
    has_known_defender = shots_data$has_known,
    known_defender_pos = shots_data$known_defender_pos,
    
    # Concentration parameters
    alpha_known = 1000.0,
    alpha_unknown = 0.001,
    alpha_regular = 2.0
  )
  
  out <- list(
    stan_data = stan_data,
    defender_to_id = defender_to_id
  )
}

```


```{r}
model_data <- list(
  # Dimensions
  N = compose_test$n,
  n_defender_name = compose_test$n_defender_name,
  n_period = n_distinct(compose_test$period),
  n_shot_type = compose_test$n_shot_type,
  n_defense_category = compose_test$n_defense_category,
  
  # Play by play data
  defender_name = compose_test$defender_name,
  period = compose_test$period,
  shot_type = compose_test$shot_type,
  defense_category = compose_test$defense_category,
  shot_made_flag = compose_test$shot_made_flag,
  
  # Defender dashboard aggregates
  makes = compose_test$makes,      # Should be a 4D array [n_defender_name, n_period, n_shot_type, n_defense_category]
  misses = compose_test$misses,    # Should be a 4D array [n_defender_name, n_period, n_shot_type, n_defense_category]
  
  # Known defender indicators
  known_defender_indicator = compose_test$known_defender_indicator,
  known_defender_pos = compose_test$known_defender_pos
)

# Fit the model
# fit <- stan(
#   file = "models/defender-hmm-binomial_full.stan", 
#   data = model_data
# )
```