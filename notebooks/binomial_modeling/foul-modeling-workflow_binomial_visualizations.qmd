---
title: "Foul Modeling Workflow - Binomial Varying Slopes Visualizations"
subtitle: "Following Statistical Rethinking Approach"
author: "Your Name"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    code-fold: show
    theme: cosmo
editor: visual
---

## Setup

```{r setup, message=FALSE, warning=FALSE}
# Load necessary libraries
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(patchwork)
library(posterior)
library(ggdist)
library(scales)
library(knitr)
library(kableExtra)

# Set theme for plots
theme_set(theme_minimal(base_size = 14))

# Custom color palette
custom_palette <- c("#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD")

# Options for better figures
knitr::opts_chunk$set(
  fig.width = 10, 
  fig.height = 7,
  dpi = 300,
  out.width = "100%",
  message = FALSE,
  warning = FALSE
)
```

## Load Model

Loading the previously fitted binomial varying slopes model. This model examines how fouls vary by players and their teammates.

```{r load-model}
# Load the model from the RDS file
binomial_varying_slopes_real_update <- readRDS("models/binomial_teammates_varying_slopes_model_real_6_update.rds")

# Print model summary
summary(binomial_varying_slopes_real_update)
```

## Model Overview

Let's first understand the structure of our model and extract key components for visualization.

```{r model-structure}
# Extract posterior samples
posterior_samples <- as_draws_df(binomial_varying_slopes_real_update)

# Get model formula and priors
model_formula <- binomial_varying_slopes_real_update$formula
model_priors <- prior_summary(binomial_varying_slopes_real_update)

# Print key model information
cat("Model Formula:\n")
print(model_formula)

cat("\nPriors Used:\n")
print(model_priors)

# Extract number of observations and groups
n_obs <- nrow(binomial_varying_slopes_real_update$data)
cat("\nNumber of Observations:", n_obs, "\n")
```

## Posterior Distribution Visualizations

Following McElreath's approach, we'll focus on visualizing posterior distributions to understand parameter estimates and uncertainty.

### Fixed Effects

```{r fixed-effects}
# Plot posterior distributions of fixed effects
mcmc_areas(posterior_samples, 
           pars = c("b_Intercept", "b_teammate_fouls_scaled", "b_personal_fouls_scaled"),
           prob = 0.95,
           prob_outer = 0.99) +
  labs(title = "Posterior Distributions of Fixed Effects",
       subtitle = "With 95% and 99% credible intervals") +
  scale_y_discrete(labels = c("Intercept", "Teammate Fouls", "Personal Fouls"))

# Table of posterior summaries
fixef_summary <- fixef(binomial_varying_slopes_real_update) %>%
  as.data.frame()  |> 
  rownames_to_column("Parameter") 

kable(fixef_summary, digits = 3, caption = "Fixed Effects Summary (log-odds")  |> 
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```

### Varying Effects (Random Effects)

```{r varying-effects}
# Extract varying intercepts for players
ranef_summary <- ranef(binomial_varying_slopes_real_update)

# Plot the top and bottom 10 player-specific intercepts
player_intercepts <- ranef_summary$player[,"Estimate", "Intercept"] 
player_intercepts_df <- data.frame(
  player = names(player_intercepts),
  intercept = player_intercepts
)

# Top 10 players (highest intercepts)
top_players <- player_intercepts_df %>%
  arrange(desc(intercept)) %>%
  head(10)

# Bottom 10 players (lowest intercepts)
bottom_players <- player_intercepts_df %>%
  arrange(intercept) %>%
  head(10)

# Combine and plot
bind_rows(
  top_players %>% mutate(group = "Top 10"),
  bottom_players %>% mutate(group = "Bottom 10")
) %>%
  mutate(player = fct_reorder(player, intercept)) %>%
  ggplot(aes(x = intercept, y = player, fill = group)) +
  geom_col() +
  scale_fill_manual(values = c("Top 10" = "#2CA02C", "Bottom 10" = "#D62728")) +
  labs(title = "Players with Highest and Lowest Foul Tendencies",
       subtitle = "After controlling for other factors",
       x = "Log-odds deviation from population mean",
       y = "Player",
       fill = "Group") +
  theme(legend.position = "top")
```

### Parameter Correlations

```{r parameter-correlations}
# Select key parameters to examine correlations
key_params <- c(
  "b_Intercept", 
  "b_teammate_fouls_scaled", 
  "b_personal_fouls_scaled",
  "sd_position:slug_team__Intercept",
  "sd_position:slug_team__teammate_fouls_scaled"
)

# Plot correlation matrix with updated parameters
mcmc_pairs(posterior_samples, pars = key_params, diag_fun = "dens",
          off_diag_fun = "hex")
```

## Posterior Predictive Checks

Following McElreath's approach, we'll conduct posterior predictive checks to ensure our model captures the patterns in the data.

```{r posterior-predictive-checks}
# Generate posterior predictive samples
pp_check(binomial_varying_slopes_real_update, ndraws = 100) +
  labs(title = "Posterior Predictive Check",
       subtitle = "Blue = Observed data, Gray = Posterior predictive samples",
       x = "Foul Count")

# More specific posterior predictive check for a binomial model
pp_check(binomial_varying_slopes_real_update, type = "ecdf_overlay", ndraws = 100) +
  labs(title = "Empirical Cumulative Distribution",
       subtitle = "Blue = Observed data, Gray = Posterior predictive samples")
```

## Conditional Effects

Visualizing how predicted outcomes change as we vary key predictors while holding others constant.

```{r conditional-effects}
# Plot conditional effects for main predictors
plot(conditional_effects(binomial_varying_slopes_real_update))

plot(conditional_effects(binomial_varying_slopes_real_update, 
                        effects = "teammate_fouls_scaled:position"), 
     points = TRUE, point_alpha = 0.2) +
  labs(title = "Effect of Teammate Fouls by Position",
       subtitle = "With position-specific slopes")

plot(conditional_effects(binomial_varying_slopes_real_update, 
                        effects = "personal_fouls_scaled"), 
     points = TRUE, point_alpha = 0.2) +
  labs(title = "Effect of Personal Fouls on Foul Probability")
```


## Counterfactual Predictions

```{r}

# Create a grid of counterfactual scenarios using our actual predictors
counterfactual_data <- expand_grid(
  personal_fouls_scaled = seq(-2, 2, by = 0.5),  # Range of personal fouls (standardized)
  teammate_fouls_scaled = seq(-2, 2, by = 0.5),  # Range of teammate fouls (standardized)
  position = c("G", "F", "C")  # Different positions
)

# Create predictions for these scenarios
predictions <- fitted(
  binomial_varying_slopes_real_update,
  newdata = counterfactual_data,
  re_formula = NA,  # Marginalizing over random effects
  summary = TRUE
) 

# Combine predictions with counterfactual data
pred_df <- counterfactual_data %>%
  mutate(
    pred_mean = predictions[, "Estimate"],
    pred_lower = predictions[, "Q2.5"],
    pred_upper = predictions[, "Q97.5"]
  )

# Plot predictions
ggplot(pred_df, aes(x = personal_fouls_scaled, y = pred_mean, 
                    color = factor(teammate_fouls_scaled))) +
  geom_line(size = 1.2) +
  facet_wrap(~position) +
  geom_ribbon(aes(ymin = pred_lower, ymax = pred_upper, 
                  fill = factor(teammate_fouls_scaled)), 
              alpha = 0.1, color = NA) +
  scale_color_viridis_d(name = "Teammate Fouls\n(standardized)") +
  scale_fill_viridis_d(name = "Teammate Fouls\n(standardized)") +
  labs(title = "Predicted Foul Probability",
       subtitle = "By personal fouls, teammate fouls, and position",
       x = "Personal Fouls (standardized)",
       y = "Predicted Probability of Foul",
       color = "Teammate Fouls") +
  theme_minimal() +
  theme(legend.position = "right")

# Alternative visualization focusing on teammate effects
ggplot(pred_df, aes(x = teammate_fouls_scaled, y = pred_mean, 
                    color = factor(personal_fouls_scaled))) +
  geom_line(size = 1.2) +
  facet_wrap(~position) +
  geom_ribbon(aes(ymin = pred_lower, ymax = pred_upper, 
                  fill = factor(personal_fouls_scaled)), 
              alpha = 0.1, color = NA) +
  scale_color_viridis_d(name = "Personal Fouls\n(standardized)") +
  scale_fill_viridis_d(name = "Personal Fouls\n(standardized)") +
  labs(title = "Predicted Foul Probability",
       subtitle = "By teammate fouls, personal fouls, and position",
       x = "Teammate Fouls (standardized)",
       y = "Predicted Probability of Foul",
       color = "Personal Fouls") +
  theme_minimal() +
  theme(legend.position = "right")

# Add interpretation text
cat("Counterfactual Predictions Summary:\n")
cat("- Base scenario (all predictors at mean):\n")
base_scenario <- data.frame(
  personal_fouls_scaled = 0,
  teammate_fouls_scaled = 0,
  position = "G"
)
base_pred <- fitted(binomial_varying_slopes_real_update, 
                   newdata = base_scenario, 
                   re_formula = NA,
                   summary = TRUE)
cat("  Predicted probability:", round(base_pred[1, "Estimate"], 3), "\n")
cat("  95% CI: [", round(base_pred[1, "Q2.5"], 3), ",", 
    round(base_pred[1, "Q97.5"], 3), "]\n\n")

# Effect of one SD increase in personal fouls
high_personal <- base_scenario
high_personal$personal_fouls_scaled <- 1
personal_pred <- fitted(binomial_varying_slopes_real_update, 
                       newdata = high_personal,
                       re_formula = NA,
                       summary = TRUE)
cat("- Effect of +1 SD in personal fouls:\n")
cat("  Change in probability:", 
    round(personal_pred[1, "Estimate"] - base_pred[1, "Estimate"], 3), "\n")

```



## Effect Size Interpretation

```{r}
# Generate predictions for meaningful changes in key predictors
effect_data <- expand_grid(
  personal_fouls_scaled = c(-1, 0, 1),  # -1 SD, Mean, +1 SD
  teammate_fouls_scaled = c(-1, 0, 1),  # -1 SD, Mean, +1 SD
  position = c("G", "F", "C", "F-C", "C-F", "F-G", "G-F")
)

# Get fitted values
effect_predictions <- fitted(
  binomial_varying_slopes_real_update,
  newdata = effect_data,
  re_formula = NA,  # Marginalizing over random effects
  summary = TRUE
)

# Combine with data
effect_df <- effect_data %>%
  mutate(
    pred_mean = effect_predictions[, "Estimate"],
    pred_lower = effect_predictions[, "Q2.5"],
    pred_upper = effect_predictions[, "Q97.5"]
  )

# Calculate and display key effects
cat("Effect Size Interpretation:\n\n")

# Effect of personal fouls (at mean teammate fouls)
personal_effects <- effect_df %>%
  filter(teammate_fouls_scaled == 0) %>%
  group_by(position) %>%
  summarize(
    effect_size = pred_mean[personal_fouls_scaled == 1] - pred_mean[personal_fouls_scaled == -1],
    effect_lower = pred_lower[personal_fouls_scaled == 1] - pred_upper[personal_fouls_scaled == -1],
    effect_upper = pred_upper[personal_fouls_scaled == 1] - pred_lower[personal_fouls_scaled == -1]
  )

cat("Effect of changing personal fouls from -1 SD to +1 SD (at mean teammate fouls):\n")
for(i in 1:nrow(personal_effects)) {
  cat(sprintf("%s position: %.3f [%.3f, %.3f]\n", 
              personal_effects$position[i],
              personal_effects$effect_size[i],
              personal_effects$effect_lower[i],
              personal_effects$effect_upper[i]))
}

# Effect of teammate fouls (at mean personal fouls)
teammate_effects <- effect_df %>%
  filter(personal_fouls_scaled == 0) %>%
  group_by(position) %>%
  summarize(
    effect_size = pred_mean[teammate_fouls_scaled == 1] - pred_mean[teammate_fouls_scaled == -1],
    effect_lower = pred_lower[teammate_fouls_scaled == 1] - pred_upper[teammate_fouls_scaled == -1],
    effect_upper = pred_upper[teammate_fouls_scaled == 1] - pred_lower[teammate_fouls_scaled == -1]
  )

cat("\nEffect of changing teammate fouls from -1 SD to +1 SD (at mean personal fouls):\n")
for(i in 1:nrow(teammate_effects)) {
  cat(sprintf("%s position: %.3f [%.3f, %.3f]\n", 
              teammate_effects$position[i],
              teammate_effects$effect_size[i],
              teammate_effects$effect_lower[i],
              teammate_effects$effect_upper[i]))
}

# Joint effects (high personal AND high teammate fouls vs low personal AND low teammate fouls)
joint_effects <- effect_df %>%
  group_by(position) %>%
  summarize(
    effect_size = pred_mean[personal_fouls_scaled == 1 & teammate_fouls_scaled == 1] - 
                 pred_mean[personal_fouls_scaled == -1 & teammate_fouls_scaled == -1],
    effect_lower = pred_lower[personal_fouls_scaled == 1 & teammate_fouls_scaled == 1] - 
                  pred_upper[personal_fouls_scaled == -1 & teammate_fouls_scaled == -1],
    effect_upper = pred_upper[personal_fouls_scaled == 1 & teammate_fouls_scaled == 1] - 
                  pred_lower[personal_fouls_scaled == -1 & teammate_fouls_scaled == -1]
  )

cat("\nJoint effect of high personal AND teammate fouls vs low personal AND teammate fouls:\n")
for(i in 1:nrow(joint_effects)) {
  cat(sprintf("%s position: %.3f [%.3f, %.3f]\n", 
              joint_effects$position[i],
              joint_effects$effect_size[i],
              joint_effects$effect_lower[i],
              joint_effects$effect_upper[i]))
}

# Visualize effect sizes
ggplot(personal_effects, aes(x = position, y = effect_size)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = effect_lower, ymax = effect_upper), width = 0.2) +
  labs(title = "Effect of Personal Fouls by Position",
       subtitle = "Change in probability from -1 SD to +1 SD",
       x = "Position",
       y = "Change in Probability") +
  theme_minimal()

ggplot(teammate_effects, aes(x = position, y = effect_size)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = effect_lower, ymax = effect_upper), width = 0.2) +
  labs(title = "Effect of Teammate Fouls by Position",
       subtitle = "Change in probability from -1 SD to +1 SD",
       x = "Position",
       y = "Change in Probability") +
  theme_minimal()
```
## Position and Team Effects Analysis

```{r position-team-effects}
# Extract position:team random effects
position_team_effects <- ranef(binomial_varying_slopes_real_update)$`position:slug_team`

# Create a dataframe with both intercepts and slopes
position_team_df <- data.frame(
  position_team = rownames(position_team_effects),
  intercept = position_team_effects[, "Estimate", "Intercept"],
  teammate_slope = position_team_effects[, "Estimate", "teammate_fouls_scaled"]
) %>%
  # Separate position and team
  separate(position_team, into = c("position", "team"), sep = ":", remove = FALSE) %>%
  # Calculate total effect (combining intercept and slope)
  mutate(
    total_effect = intercept + teammate_slope,
    effect_type = case_when(
      intercept > 0 & teammate_slope > 0 ~ "High Both",
      intercept < 0 & teammate_slope < 0 ~ "Low Both",
      intercept > 0 & teammate_slope < 0 ~ "High Base/Low Teammate",
      TRUE ~ "Low Base/High Teammate"
    )
  )

# Plot 1: Scatter plot of intercepts vs slopes by position
ggplot(position_team_df, aes(x = intercept, y = teammate_slope, color = position)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(title = "Position-Team Effects",
       subtitle = "Random intercepts vs teammate foul slopes",
       x = "Random Intercept (baseline foul tendency)",
       y = "Random Slope (teammate foul effect)",
       color = "Position") +
  theme_minimal() +
  facet_wrap(~position)

# For each position, get top and bottom teams
top_teams <- position_team_df %>%
  group_by(position) %>%
  slice_max(order_by = total_effect, n = 5) %>%
  mutate(rank_type = "Top 5")

bottom_teams <- position_team_df %>%
  group_by(position) %>%
  slice_min(order_by = total_effect, n = 5) %>%
  mutate(rank_type = "Bottom 5")

# Combine top and bottom teams
top_bottom_teams <- bind_rows(top_teams, bottom_teams)

# Create the visualization
ggplot(top_bottom_teams, 
       aes(x = reorder(interaction(team, position), total_effect), 
           y = total_effect, 
           fill = rank_type)) +
  geom_col() +
  facet_wrap(~position, scales = "free_y") +
  coord_flip() +
  scale_fill_manual(values = c("Top 5" = "#2CA02C", "Bottom 5" = "#D62728")) +
  labs(title = "Teams with Highest and Lowest Foul Effects by Position",
       subtitle = "Combining baseline tendency and teammate effects",
       x = "Team",
       y = "Total Effect (Random Intercept + Slope)",
       fill = "Rank") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8))  # Smaller text for team names

# Summary statistics by position
position_summary <- position_team_df %>%
  group_by(position) %>%
  summarize(
    mean_intercept = mean(intercept),
    sd_intercept = sd(intercept),
    mean_teammate_effect = mean(teammate_slope),
    sd_teammate_effect = sd(teammate_slope),
    n_teams = n()
  )

# Print summary
cat("Position Summary Statistics:\n\n")
print(kable(position_summary, digits = 3,
            col.names = c("Position", "Mean Baseline", "SD Baseline", 
                         "Mean Teammate Effect", "SD Teammate Effect", "# Teams")))

# Identify notable patterns
cat("\nNotable Position-Team Combinations:\n")

# High baseline, high teammate effect
high_both <- position_team_df %>%
  filter(intercept > quantile(intercept, 0.75) & 
         teammate_slope > quantile(teammate_slope, 0.75)) %>%
  arrange(desc(total_effect))

cat("\nTeams with high baseline AND strong teammate effects:\n")
print(kable(head(high_both[, c("position", "team", "intercept", "teammate_slope")]), digits = 3))

# Low baseline, low teammate effect
low_both <- position_team_df %>%
  filter(intercept < quantile(intercept, 0.25) & 
         teammate_slope < quantile(teammate_slope, 0.25)) %>%
  arrange(total_effect)

cat("\nTeams with low baseline AND weak teammate effects:\n")
print(kable(head(low_both[, c("position", "team", "intercept", "teammate_slope")]), digits = 3))

# Calculate position-specific teammate foul effects
teammate_effects_by_pos <- position_team_df %>%
  group_by(position) %>%
  summarize(
    mean_effect = mean(teammate_slope),
    lower_ci = quantile(teammate_slope, 0.025),
    upper_ci = quantile(teammate_slope, 0.975)
  )

teammate_effects_by_pos <- teammate_effects_by_pos %>%
  mutate(
    # Add significance indicator
    significant = !(lower_ci <= 0 & upper_ci >= 0),
    # Add effect size category
    effect_size = case_when(
      mean_effect > 0.1 ~ "Large positive",
      mean_effect > 0.05 ~ "Moderate positive",
      mean_effect < -0.1 ~ "Large negative",
      mean_effect < -0.05 ~ "Moderate negative",
      TRUE ~ "Small"
    ),
    # Reorder positions by effect size
    position = fct_reorder(position, mean_effect)
  ) |> filter(effect_size != "Small")


# Modified plot with x-axis text removed
ggplot(teammate_effects_by_pos, aes(x = position, y = mean_effect)) +
  # Add reference line at zero
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
  # Add error bars
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), 
                width = 0.3, color = "gray40") +
  # Add points with color and size mapped, but use fixed alpha
  geom_point(aes(color = effect_size, size = abs(mean_effect)),
             alpha = 0.8) +  # Fixed alpha instead of mapping
  # Add text labels with ggrepel to avoid overlaps
  ggrepel::geom_text_repel(
    data = teammate_effects_by_pos %>% 
      filter(effect_size %in% c("Large positive", "Moderate positive", 
                               "Large negative", "Moderate negative")),
    aes(label = position),
    size = 3,
    box.padding = 0.5,
    point.padding = 0.3,
    force = 10,
    segment.color = "gray50",
    segment.alpha = 0.6,
    min.segment.length = 0,
    max.overlaps = 20,
    seed = 42
  ) +
  # Customize colors and scales
  scale_color_manual(values = c(
    "Large positive" = "#2CA02C",
    "Moderate positive" = "#98DF8A",
    "Small" = "gray60",
    "Moderate negative" = "#FF9896",
    "Large negative" = "#D62728"
  )) +
  scale_size_continuous(range = c(3, 6)) +
  # Customize theme and labels
  labs(title = "Teammate Foul Effects by Position",
       subtitle = "Positions ordered by effect size\nOnly position/team combinations with significant effects shown",
       x = NULL,  # Remove x-axis label
       y = "Average Teammate Foul Effect",
       color = "Effect Size",
       size = "Magnitude") +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),  # Remove x-axis text
    axis.ticks.x = element_blank(),  # Remove x-axis ticks
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),  # Remove vertical grid lines
    legend.position = "right",
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_text(size = 9)
  ) +
  # Add horizontal spacing
  scale_x_discrete(expand = c(0.2, 0.2)) +
  # Add reasonable y-axis limits
  coord_cartesian(ylim = c(
    min(teammate_effects_by_pos$lower_ci) * 1.2,
    max(teammate_effects_by_pos$upper_ci) * 1.2
  ))
```


```{r session-info}
sessionInfo()
```
