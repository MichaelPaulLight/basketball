hospital_readmission = names(which.max(table(filtered_city_df$hospital_readmission))),
county = names(which.max(table(filtered_city_df$county))),
city = names(which.max(table(filtered_city_df$city))),
profit_or_nonprofit = names(which.max(table(filtered_city_df$profit_or_nonprofit))),
std_chain_organization = names(which.max(table(filtered_city_df$std_chain_organization)))
)
# Adding predicted draws
predictions <- new_data |>
add_epred_draws(model, ndraws = 1000)
#| label: fig-patient-experience-effect
#| fig-cap: "Effect of Patient Experience Rating on Predicted Vote Percentage"
experience_plot <- ggplot(predictions, aes(x = patient_experience_rating, y = .epred)) +
geom_jitter(data = filtered_city_df, aes(y = vote_perc), alpha = 0.2, color = report_colors[9]) +
stat_lineribbon(aes(y = .epred), .width = c(.95, .80, .50), alpha = 0.5) +
labs(
title = "Effect of Patient Experience Rating on Predicted Vote Percentage",
subtitle = "Controlling for other variables at their mean or most common values",
x = "Patient Experience Rating",
y = "Predicted Vote Percentage",
caption = "Shaded areas represent 95%, 80%, and 50% credible intervals\nGrey dots represent observed data"
) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_fill_manual(values = report_colors[1:3]) +
theme_report() +
theme(
legend.position = "none",
plot.caption = element_text(hjust = 0, size = 8, color = "#7f8c8d"),
plot.subtitle = element_text(size = 10, color = "#7f8c8d")
)
ggsave("../../007_visualizations/patient_experience_effect.png", plot = experience_plot, width = 10, height = 6, dpi = 300)
#| label: fig-pp-check
#| fig-cap: "Posterior Predictive Check"
pp_check_plot <- pp_check(model, type = "dens_overlay", nsamples = 100) +
scale_color_manual(values = c("black", rep(report_colors[1], 100))) +
labs(
title = "Posterior Predictive Check",
subtitle = "Density overlay of observed vs. simulated data",
x = "Vote Percentage",
y = "Density"
) +
theme_report() +
theme(legend.position = "none")
ggsave("../../007_visualizations/pp_check.png", plot = pp_check_plot, width = 10, height = 6, dpi = 300)
renv::snapshot()
#| label: setup
#| include: false
# Load required packages
library(tidyverse)
library(brms)
library(tidybayes)
library(bayesplot)
library(dagitty)
library(ggdag)
library(nanoparquet)
library(zoo)
lineup_stats <- (
pbp_data
|> group_by(game_id, slug_team)
|> mutate(stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA))
|> group_by(game_id)
|> mutate(across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
across(starts_with("stint"), ~ na.locf(.)))
|> ungroup()
|> pivot_longer(cols = starts_with("lineup"),
names_to = "lineup_location",
values_to = "lineup",
names_prefix = "lineup_")
|> mutate(pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
slug_team = ifelse(lineup_location == "home", team_home, team_away),
slug_opp = ifelse(lineup_location == "away", team_home, team_away),
stint = ifelse(lineup_location == "home", stint_home, stint_away))
# |> select(game_id, game_date, period, stint, number_event, msg_type, description, lineup, pts_team, pts_opp,
#         poss_team, poss_opp, secs_played, slug_team, slug_opp, garbage_time)
# |> group_by(game_id, game_date, period, stint, slug_team, slug_opp, lineup, garbage_time)
# |> summarise(across(c(pts_team, pts_opp, poss_team, poss_opp, secs_played), sum))
# |> ungroup()
# |> filter(secs_played + poss_opp + poss_team + pts_opp + pts_team > 0)
# |> group_by(game_id, slug_team)
# |> mutate(stint = row_number(),
#          plus_minus = pts_team - pts_opp)
# |> ungroup()
)
pbp_data <- read_parquet("../data/250203_pbp_gt.parquet")
lineup_stats <- (
pbp_data
|> group_by(game_id, slug_team)
|> mutate(stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA))
|> group_by(game_id)
|> mutate(across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
across(starts_with("stint"), ~ na.locf(.)))
|> ungroup()
|> pivot_longer(cols = starts_with("lineup"),
names_to = "lineup_location",
values_to = "lineup",
names_prefix = "lineup_")
|> mutate(pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
slug_team = ifelse(lineup_location == "home", team_home, team_away),
slug_opp = ifelse(lineup_location == "away", team_home, team_away),
stint = ifelse(lineup_location == "home", stint_home, stint_away))
# |> select(game_id, game_date, period, stint, number_event, msg_type, description, lineup, pts_team, pts_opp,
#         poss_team, poss_opp, secs_played, slug_team, slug_opp, garbage_time)
# |> group_by(game_id, game_date, period, stint, slug_team, slug_opp, lineup, garbage_time)
# |> summarise(across(c(pts_team, pts_opp, poss_team, poss_opp, secs_played), sum))
# |> ungroup()
# |> filter(secs_played + poss_opp + poss_team + pts_opp + pts_team > 0)
# |> group_by(game_id, slug_team)
# |> mutate(stint = row_number(),
#          plus_minus = pts_team - pts_opp)
# |> ungroup()
)
pbp_with_fouls_by_player <- (lineup_stats
|> separate_longer_delim(cols = lineup, delim = ", ")
|> rename(player_name = lineup)
|> mutate(personal_fouls = case_when(str_detect(description, regex("foul:", ignore_case = T)) & player1 == player_name ~ str_extract(description, regex("\\([^()]*\\)(?![^()]*\\))")), TRUE ~ NA))
|> mutate(personal_foul_occurance = case_when(str_detect(description, regex("foul:", ignore_case = T)) ~ 1, TRUE ~ 0))
|> mutate(referee = case_when(str_detect(description, regex("foul:", ignore_case = T)) & player1 == player_name ~ str_extract(description, regex("\\([^()]*\\)(?!.*\\([^()]*\\))")), TRUE ~ NA))
|> mutate(referee = str_remove_all(referee, "[()]"))
|> mutate(personal_fouls = str_extract(personal_fouls, regex("\\d+")))
|> mutate(personal_fouls = as.numeric(personal_fouls))
|> group_by(game_id, slug_team, player_name)
|> fill(personal_fouls, .direction = "down")
|> mutate(personal_fouls = replace_na(personal_fouls, 0))
|> mutate(total_fta = replace_na(total_fta, 0))
|> mutate(total_fta = as.numeric(total_fta))
|> mutate(game_id = as.character(game_id))
)
model_data <- (pbp_with_fouls_by_player
|> filter(poss_opp == 1)
|> select(game_id, slug_team, slug_opp, number_event, pts_opp, player_name, personal_fouls, total_fta)
|> mutate(personal_fouls = as.integer(personal_fouls))
)
lineup_stats <- (
pbp_data
|> group_by(game_id, slug_team)
|> mutate(stint_home = ifelse(slug_team == team_home, cumsum(msg_type == 8) + 1, NA),
stint_away = ifelse(slug_team == team_away, cumsum(msg_type == 8) + 1, NA))
|> group_by(game_id)
|> mutate(across(starts_with("stint"), ~ na.locf0(., fromLast = TRUE)),
across(starts_with("stint"), ~ na.locf(.)))
|> ungroup()
|> pivot_longer(cols = starts_with("lineup"),
names_to = "lineup_location",
values_to = "lineup",
names_prefix = "lineup_")
|> mutate(pts_team = ifelse(lineup_location == "home", shot_pts_home, shot_pts_away),
pts_opp = ifelse(lineup_location == "away", shot_pts_home, shot_pts_away),
poss_team = ifelse(lineup_location == "home", poss_home, poss_away),
poss_opp = ifelse(lineup_location == "away", poss_home, poss_away),
slug_team = ifelse(lineup_location == "home", team_home, team_away),
slug_opp = ifelse(lineup_location == "away", team_home, team_away),
stint = ifelse(lineup_location == "home", stint_home, stint_away))
# |> select(game_id, game_date, period, stint, number_event, msg_type, description, lineup, pts_team, pts_opp,
#         poss_team, poss_opp, secs_played, slug_team, slug_opp, garbage_time)
# |> group_by(game_id, game_date, period, stint, slug_team, slug_opp, lineup, garbage_time)
# |> summarise(across(c(pts_team, pts_opp, poss_team, poss_opp, secs_played), sum))
# |> ungroup()
# |> filter(secs_played + poss_opp + poss_team + pts_opp + pts_team > 0)
# |> group_by(game_id, slug_team)
# |> mutate(stint = row_number(),
#          plus_minus = pts_team - pts_opp)
# |> ungroup()
)
pbp_with_fouls_by_player <- (lineup_stats
|> separate_longer_delim(cols = lineup, delim = ", ")
|> rename(player_name = lineup)
|> mutate(personal_fouls = case_when(str_detect(description, regex("foul:", ignore_case = T)) & player1 == player_name ~ str_extract(description, regex("\\([^()]*\\)(?![^()]*\\))")), TRUE ~ NA))
|> mutate(personal_foul_occurance = case_when(str_detect(description, regex("foul:", ignore_case = T)) ~ 1, TRUE ~ 0))
|> mutate(referee = case_when(str_detect(description, regex("foul:", ignore_case = T)) & player1 == player_name ~ str_extract(description, regex("\\([^()]*\\)(?!.*\\([^()]*\\))")), TRUE ~ NA))
|> mutate(referee = str_remove_all(referee, "[()]"))
|> mutate(personal_fouls = str_extract(personal_fouls, regex("\\d+")))
|> mutate(personal_fouls = as.numeric(personal_fouls))
|> group_by(game_id, slug_team, player_name)
|> fill(personal_fouls, .direction = "down")
|> mutate(personal_fouls = replace_na(personal_fouls, 0))
|> mutate(total_fta = replace_na(total_fta, 0))
|> mutate(total_fta = as.numeric(total_fta))
|> mutate(game_id = as.character(game_id))
)
model_data <- (pbp_with_fouls_by_player
|> filter(poss_opp == 1)
|> filter(garbage_time == 0)
|> select(game_id, slug_team, slug_opp, number_event, pts_opp, player_name, personal_fouls, total_fta)
|> mutate(personal_fouls = as.integer(personal_fouls))
)
model_formula <- bf(
pts_opp ~ personal_fouls +
(1 | game_id) +
(1 | slug_opp) +
(1 | game_id:number_event), # Nest possession within game
family = negbinomial()
)
prior_model <- brm(
formula = model_formula,
data = model_data,
sample_prior = "only",
cores = 4,
chains = 4,
iter = 2000,
warmup = 1000,
seed = 123,
control = list(adapt_delta = 0.95),
prior = c(
# Intercept: centered around 1.15 (typical NBA PPP) with some variance
prior(normal(1.15, 0.5), class = "Intercept"),
# Effect of personal fouls: expect small positive effect
# A one-foul increase might lead to ~0.1-0.2 more points
prior(normal(0.15, 0.1), class = "b", coef = "personal_fouls"),
# Game-level variation: teams typically score within ~10-15 points of their average
# Converting to per-possession: ~0.2-0.3 points
prior(exponential(4), class = "sd", group = "game_id"),
# Team offense variation: better offenses score ~5-10 more points per game
# Converting to per-possession: ~0.1-0.2 points
prior(exponential(6), class = "sd", group = "slug_opp"),
# Possession-level variation: can vary quite a bit
prior(exponential(3), class = "sd", group = "game_id:number_event"),
# Negative binomial dispersion parameter
prior(gamma(2, 1), class = "shape")
)
)
list.files(tempdir(), pattern = "brm|stan", full.names = TRUE)
# Check the current working directory
list.files(".", pattern = "brm|stan", full.names = TRUE)
list.files(".", pattern = "\\.csv$", full.names = TRUE)
#| label: setup
#| include: false
# Load required packages
library(tidyverse)
library(brms)
library(tidybayes)
library(bayesplot)
library(dagitty)
library(ggdag)
library(patchwork)
library(nanoparquet)
library(zoo)
# Loading stratified training and validation samples
stratified_sample_scaled <- read_parquet("samples/stratified_sample_scaled.parquet")
validation_sample_scaled <- read_parquet("samples/validation_sample_scaled.parquet")
#| label: setup
#| include: false
# Load required packages
library(tidyverse)
library(brms)
library(tidybayes)
library(bayesplot)
library(dagitty)
library(ggdag)
library(patchwork)
library(nanoparquet)
library(zoo)
# Loading stratified training and validation samples
stratified_sample_scaled <- read_parquet("samples/stratified_sample_scaled.parquet")
validation_sample_scaled <- read_parquet("samples/validation_sample_scaled.parquet")
varying_slopes_binomial_sim <- brm(
formula = position_varying_slopes_model,
data = sim_data_scaled,
family = bernoulli(),
prior = position_varying_slopes_priors,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 12),
seed = 42,
file = "models/binomial_teammates_varying_slopes_model_sim_2.rds"
)
setwd("~/Documents/GitHub/basketball/notebooks/binomial_modeling")
n_games <- 5       # Number of games
n_players <- 25    # Number of players
n_events_per_game <- 100  # Events per game (simplified)
# True parameter values
base_rate <- -3.7   # Base log-odds for foul probability (~2.5% foul rate)
player_sd <- 0.3    # SD for player random effects
team_sd <- 0.2      # SD for team effects
period_sd <- 0.15   # SD for period effects
game_sd <- 0.25     # SD for game effects
teammate_effect <- 0.1  # Effect of teammate fouls
# Define positions and their baseline foul tendencies
positions <- c("PG", "SG", "SF", "PF", "C")
position_effects <- c(-0.2, -0.1, 0, 0.2, 0.3)  # Centers foul more than guards
names(position_effects) <- positions
# Generate player effects
set.seed(123)
player_effects <- rnorm(n_players, 0, player_sd)
names(player_effects) <- paste0("Player_", 1:n_players)
# Assign positions to players
player_positions <- sample(positions, n_players, replace = TRUE,
prob = c(0.2, 0.2, 0.2, 0.2, 0.2))
names(player_positions) <- names(player_effects)
# Generate team effects
n_teams <- 5
team_effects <- rnorm(n_teams, 0, team_sd)
teams <- paste0("Team_", LETTERS[1:n_teams])
names(team_effects) <- teams
# Generate game effects
game_effects <- rnorm(n_games, 0, game_sd)
names(game_effects) <- paste0("Game_", 1:n_games)
# Generate period effects
period_effects <- rnorm(4, 0, period_sd)
names(period_effects) <- paste0("Period_", 1:4)
# Function to simulate one game's events
simulate_game <- function(game_id) {
# Create data frame for this game
game_data <- data.frame()
# Assign teams for this game
home_team <- sample(teams, 1)
away_team <- sample(setdiff(teams, home_team), 1)
# Track accumulated fouls for each player
player_fouls <- rep(0, n_players)
names(player_fouls) <- paste0("Player_", 1:n_players)
# Assign players to teams (5 players per team)
# Make sure each team has one player of each position
home_players <- character(5)
away_players <- character(5)
for (pos in 1:5) {
pos_players <- names(player_positions[player_positions == positions[pos]])
if (length(pos_players) >= 2) {
selected <- sample(pos_players, 2)
home_players[pos] <- selected[1]
away_players[pos] <- selected[2]
} else {
# Fallback if not enough players of a position
available <- setdiff(names(player_positions), c(home_players, away_players))
home_players[pos] <- sample(available, 1)
available <- setdiff(available, home_players[pos])
away_players[pos] <- sample(available, 1)
}
}
for (event in 1:n_events_per_game) {
# Determine period (1-4)
current_period <- ceiling(event / (n_events_per_game/4))
# For each player on defense, simulate potential foul
defending_team <- ifelse(event %% 2 == 0, home_team, away_team)
defending_players <- ifelse(defending_team == home_team, list(home_players), list(away_players))[[1]]
for (player in defending_players) {
# Get teammates
teammates <- setdiff(defending_players, player)
# Get player position
player_position <- player_positions[player]
# Calculate foul probability
logit_p <- base_rate +
player_effects[player] +
position_effects[player_position] +  # Add position effect
team_effects[defending_team] +
period_effects[paste0("Period_", current_period)] +
game_effects[paste0("Game_", game_id)] +
teammate_effect * mean(player_fouls[teammates])
p <- plogis(logit_p)
# Simulate foul occurrence
foul_occurs <- rbinom(1, 1, p)
# Add row to game data
event_data <- data.frame(
game_id = paste0("Game_", game_id),
number_event = event,
period = current_period,
player_name = player,
position = player_position,  # Add position to data
slug_team = defending_team,
slug_opp = ifelse(defending_team == home_team, away_team, home_team),
personal_fouls_during_event = player_fouls[player],
personal_foul_occurance_on_player = foul_occurs,
act_type = sample(c("2pt", "3pt", "drive"), 1)
)
# Add teammate information
for (tm in teammates) {
event_data$teammate_name <- tm
event_data$teammate_position <- player_positions[tm]  # Add teammate position
event_data$teammate_fouls <- player_fouls[tm]
game_data <- rbind(game_data, event_data)
}
# Update player fouls if a foul occurred
if (foul_occurs) {
player_fouls[player] <- player_fouls[player] + 1
}
}
}
return(game_data)
}
# Simulate all games
sim_data <- do.call(rbind, lapply(1:n_games, simulate_game))
# Scale the numeric predictors
sim_data_scaled <- sim_data |>
group_by(player_name) |>
mutate(
teammate_fouls_scaled = scale(teammate_fouls)[,1],
personal_fouls_scaled = scale(personal_fouls_during_event)[,1]
) |>
ungroup()
# Preview the simulated data
glimpse(sim_data_scaled)
# Examine foul rates by position
sim_data_scaled <- sim_data %>%
mutate(
teammate_fouls_scaled = scale(teammate_fouls)[,1],
personal_fouls_scaled = scale(personal_fouls_during_event)[,1]
)
position_interaction_model <- bf(
personal_foul_occurance_on_player ~
teammate_fouls_scaled * position +
personal_fouls_scaled +
(1 | game_id:number_event) +
(1 | slug_team) +
(1 | player_name) +
(1 | teammate_name)
)
position_varying_slopes_model <- bf(
personal_foul_occurance_on_player ~
teammate_fouls_scaled + personal_fouls_scaled +
(1 + teammate_fouls_scaled | position:slug_team) +
(1 | game_id:number_event) +
(1 | player_name) +
(1 | teammate_name)
)
position_interaction_priors <- c(
# Population-level effects (fixed effects)
prior(normal(-3.5, 0.5), class = "Intercept"),  # Baseline foul probability (~3%)
# Main effects
prior(normal(0, 0.3), class = "b", coef = "teammate_fouls_scaled"),
prior(normal(0, 0.3), class = "b", coef = "personal_fouls_scaled"),
# Position main effects (for any number of positions)
prior(normal(0, 0.3), class = "b", coef = "position"),
# Interaction effects (position-specific teammate foul effects)
# This applies to all interaction terms
prior(normal(0, 0.2), class = "b", coef = "teammate_fouls_scaled:position"),
# Group-level effects (random effects)
prior(exponential(2), class = "sd", group = "game_id:number_event"),
prior(exponential(2), class = "sd", group = "slug_team"),
prior(exponential(2), class = "sd", group = "player_name"),
prior(exponential(2), class = "sd", group = "teammate_name")
)
position_varying_slopes_priors <- c(
# Population-level effects (fixed effects)
prior(normal(-3.5, 0.5), class = "Intercept"),  # Baseline foul probability (~3%)
prior(normal(0, 0.3), class = "b", coef = "teammate_fouls_scaled"),
prior(normal(0, 0.3), class = "b", coef = "personal_fouls_scaled"),
# Group-level effects (random effects)
# For position:slug_team varying intercepts
prior(exponential(2), class = "sd", group = "position:slug_team", coef = "Intercept"),
# For position:slug_team varying slopes
# REMOVED DUPLICATE: prior(normal(0, 0.3), class = "b", coef = "teammate_fouls_scaled"),
prior(exponential(2), class = "sd", group = "position:slug_team", coef = "teammate_fouls_scaled"),
# Correlation between intercepts and slopes
prior(lkj(2), class = "cor", group = "position:slug_team"),
# Other random effects
prior(exponential(2), class = "sd", group = "game_id:number_event"),
prior(exponential(2), class = "sd", group = "player_name"),
prior(exponential(2), class = "sd", group = "teammate_name")
)
position_varying_slopes_priors_constrained <- c(
# Population-level effects (fixed effects)
# More constrained intercept - tighter SD and more precise mean
prior(normal(-3.7, 0.3), class = "Intercept"),  # More precise baseline (~2.4% foul rate)
# More constrained fixed effects - smaller SD
prior(normal(0, 0.2), class = "b", coef = "teammate_fouls_scaled"),
prior(normal(0, 0.2), class = "b", coef = "personal_fouls_scaled"),
# Group-level effects (random effects)
# More constrained varying intercepts - larger rate parameter = smaller variance
prior(exponential(4), class = "sd", group = "position:slug_team", coef = "Intercept"),
# More constrained varying slopes - larger rate parameter = smaller variance
prior(exponential(4), class = "sd", group = "position:slug_team", coef = "teammate_fouls_scaled"),
# Stronger prior on correlation - higher concentration = stronger pull toward zero correlation
prior(lkj(4), class = "cor", group = "position:slug_team"),
# More constrained other random effects
prior(exponential(4), class = "sd", group = "game_id:number_event"),
prior(exponential(4), class = "sd", group = "player_name"),
prior(exponential(4), class = "sd", group = "teammate_name")
)
arying_slopes_binomial_sim <- brm(
formula = position_varying_slopes_model,
data = sim_data_scaled,
family = bernoulli(),
prior = position_varying_slopes_priors,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 12),
seed = 42,
file = "models/binomial_teammates_varying_slopes_model_sim_2.rds"
)
varying_slopes_binomial_real <- brm(
formula = position_varying_slopes_model,
data = stratified_sample_scaled,
family = bernoulli(),
prior = position_varying_slopes_priors,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
control = list(adapt_delta = 0.95, max_treedepth = 12),
seed = 42,
file = "models/binomial_teammates_varying_slopes_model_real_1.rds"
)
View(stratified_sample_scaled)
stratified_sample_scaled |> filter(is.na())
any(is.na(stratified_sample_scaled))
problem_rows <- stratified_sample_scaled[!complete.cases(stratified_sample_scaled), ]
head(problem_rows)
View(problem_rows)
stratified_sample_scaled <- read_parquet("samples/stratified_sample_scaled.parquet") |> drop_na()
# Loading stratified training and validation samples
stratified_sample_scaled <- read_parquet("samples/stratified_sample_scaled.parquet") |> drop_na()
validation_sample_scaled <- read_parquet("samples/validation_sample_scaled.parquet")
